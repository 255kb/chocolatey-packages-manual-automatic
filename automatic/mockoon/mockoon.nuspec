<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>mockoon</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>1.7.0</version>
    <packageSourceUrl>https://github.com/joachimschmidt557/chocolatey-packages-manual-automatic/tree/master/automatic/mockoon</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>joachim.schmidt557</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>mockoon</title>
    <authors>Guillaume Monnet</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>https://mockoon.com</projectUrl>
    <iconUrl>https://cdn.jsdelivr.net/gh/joachimschmidt557/chocolatey-packages-manual-automatic@dcc75842088ba1c333df7ca20dda29639ef0c4e4/icons/mockoon.png</iconUrl>
    <copyright>Copyright Mockoon 2017</copyright>
    <!-- If there is a license Url available, it is is required for the community feed -->
    <licenseUrl>https://github.com/255kb/mockoon/blob/master/LICENSE.md</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/255kb/mockoon</projectSourceUrl>
    <docsUrl>https://github.com/255kb/mockoon/wiki</docsUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <bugTrackerUrl>https://github.com/255kb/mockoon/issues</bugTrackerUrl>
    <tags>mockoon rest api rest-api mock foss cross-platfrom</tags>
    <summary>Mockoon is the easiest and quickest way to run mock APIs locally. No remote deployment, no account required, open source.</summary>
    <description>
## What is it? 

Mockoon is an open source server/API mocking tool built with Electron and available on Windows, Linux and MacOS.

![screenshot](https://raw.githubusercontent.com/255kb/mockoon/master/images/screenshot.jpg)

### Unlimited fast mocking

Create an unlimited number of mock local servers and routes, and run them in parallel.

### Complete control

customize routes: HTTP methods, regex paths, HTTP status, file serving, custom headers...

### ... and more

Import / export, JSON templating, auto save, proxy mode, HTTPS, latency simulation, CORS support...

## Complete list of features

* Mock an unlimited number of environments with unlimited number of routes
* Environment import / export (from file or clipboard)
* Run multiple mock local servers in parallel
* Route regex supported (/.*, /[a-z]{3}, ...)
* Support all HTTP codes and methods
* Automatic CORS headers for OPTIONS requests
* HTTPS support (self signed certificate)
* Unlimited custom headers with autocompletion
* Environment / route level latency simulation
* Incoming request logs
* Proxy mode: redirect all non-defined routes to an URL
* File serving with automatic mime type detection
* Rich text editor for body content with JSON templating
* JSON templating supports request parameters (URL and route params, query string...)
* Real-time auto save
* No account required
    </description>
    <releaseNotes>https://github.com/255kb/mockoon/releases</releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-uninstall.extension" />
    </dependencies>-->
    <!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
    <file src="legal\**" target="legal" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
